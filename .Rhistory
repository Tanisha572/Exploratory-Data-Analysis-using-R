setwd("C:/Users/Tanisha Roy/Desktop/Computer items/classroom/Mathematical foundations of Computer Science 104/Exploratory-Data-Analysis-using-R")
getwd()
data <- read.csv("vouce call rating myCall App.csv", header=TRUE, fileEncoding="UTF-8-BOM")
data
data <- read.csv("vouce call rating myCall App.xls", header=TRUE, fileEncoding="UTF-8-BOM")
data
data <- read.csv("voice call rating myCall App.xls", header=TRUE, fileEncoding="UTF-8-BOM")
data
data <- read.csv("voice call rating myCall App.xls", header=TRUE, fileEncoding="UTF-8-BOM")
data
#Read data from csv file
data <- read.csv("myCall feedback_Apr2020.xls", header=TRUE, fileEncoding="UTF-8-BOM")
data
data <- read.csv("myCall feedback_Apr2020.csv", header=TRUE, fileEncoding="UTF-8-BOM")
data
View(data)
install.packages("mice")
library(mice)
md.pattern(data)
typeof(data)
print(ncol(data)) #prints number of columns
print(nrow(data)) #prints number of rows
mode(data)
class(data)
operatorVal = unique(data$Operator)
operatorVal
inOutTravellingVal = unique(data$In.Out.Travelling)
inOutTravellingVal
networkTypeVal = unique(data$Network.Type)
networkTypeVal
operatorVal = unique(data$Operator)
inOutTravellingVal = unique(data$In.Out.Travelling)
networkTypeVal = unique(data$Network.Type)
print(operatorVal)
print(inOutTravellingVal)
print(networkTypeVal)
operatorVal = unique(data$Operator)
inOutTravellingVal = unique(data$In.Out.Travelling)
networkTypeVal = unique(data$Network.Type)
ratingVal = unique(data$Rating)
callDropCatVal = unique(data$Call.Drop.Category)
stateVal = unique(data$State.Name)
print(operatorVal)
print(inOutTravellingVal)
print(networkTypeVal)
print(callDropCatVal)
print(stateVal)
operatorVal = unique(data$Operator)
inOutTravellingVal = unique(data$In.Out.Travelling)
networkTypeVal = unique(data$Network.Type)
ratingVal = unique(data$Rating)
callDropCatVal = unique(data$Call.Drop.Category)
stateVal = unique(data$State.Name)
print(operatorVal)
print(inOutTravellingVal)
print(networkTypeVal)
print(ratingVal)
print(callDropCatVal)
print(stateVal)
print(data$Operator == "Airtel")
data$Network.Type[data$Network.Type == "Unknown"]<-NA
networkTypeVal = unique(data$Network.Type)
print(networkTypeVal)
print(data[data$Latitude == data$Longitude])
print(data[data$Latitude == data$Longitude, 1:8])
print(count(data[data$Latitude == data$Longitude, 1:8]))
print(nrow(data[data$Latitude == data$Longitude, 1:8]))
print(data[data$Latitude == -1 || data$Longitude == -1 || data$Latitude == data$Longitude, 1:8])
print(data[data$Latitude == -1, 1:8])
print(nrow(data[data$Latitude == data$Longitude, 1:8]))
data$Longitude[data$Longitude == -1 || data$Longitude == 0]<-NA
data$Latitude[data$Latitude == -1 || data$Latitude == 0]<-NA
View(data)
data$Network.Type[data$Network.Type == "Unknown"]<-NA
data$Longitude[data$Longitude == -1.0 || data$Longitude == 0.0]<-NA
data$Latitude[data$Latitude == -1.0 || data$Latitude == 0.0]<-NA
View(data)
data$Latitude[data$Latitude == -1.0 || data$Latitude == 0.0]<-0
View(data)
data <- read.csv("myCall feedback_Apr2020.csv", header=TRUE, fileEncoding="UTF-8-BOM")
View(data)
attrs = ncol(data) #number of columns
records = nrow(data) #number of rows
print("No. of records: "+records)
print("No. of attributes: "+attrs)
class(data)
print("No. of records: ",records)
print("No. of attributes: ",attrs)
class(data)
data <- read.csv("myCall feedback_Apr2020.csv", header=TRUE, fileEncoding="UTF-8-BOM")
View(data)
attrs = ncol(data) #number of columns
records = nrow(data) #number of rows
print("No. of records: ",records)
print("No. of attributes: ",attrs)
class(data)
attrs <- ncol(data) #number of columns
records <- nrow(data) #number of rows
print("No. of records: ",records)
print("No. of attributes: ",attrs)
class(data)
sprintf("No. of records: %d",records)
print("No. of attributes: %d",attrs)
class(data)
sprintf("No. of records: %d",records)
sprintf("No. of attributes: %d",attrs)
class(data)
data <- read.csv("myCall feedback_Apr2020.csv", header=TRUE, fileEncoding="UTF-8-BOM")
View(data)
attrs <- ncol(data) #number of columns
records <- nrow(data) #number of rows
sprintf("No. of records: %d",records)
sprintf("No. of attributes: %d",attrs)
class(data)
operatorVal = unique(data$Operator)
inOutTravellingVal = unique(data$In.Out.Travelling)
networkTypeVal = unique(data$Network.Type)
ratingVal = unique(data$Rating)
callDropCatVal = unique(data$Call.Drop.Category)
stateVal = unique(data$State.Name)
print(operatorVal)
print(inOutTravellingVal)
print(networkTypeVal)
print(ratingVal)
print(callDropCatVal)
print(stateVal)
print(nrow(data[data$Latitude == data$Longitude, 1:8]))
data$Network.Type[data$Network.Type == "Unknown"]<-NA
data$Longitude[data$Longitude == -1.0 || data$Longitude == 0.0]<-NA
data$Latitude[data$Latitude == -1.0 || data$Latitude == 0.0]<-NA
View(data)
data %>%
replace_na(list(data$Latitude = -1, data$Longitude = -1))
data$Network.Type[data$Network.Type == "Unknown"]<-NA
data %>%
replace_na(list(data$Latitude == -1, data$Longitude == -1))
data$Network.Type[data$Network.Type == "Unknown"]<-NA
data$Network.Type[data$Network.Type == "Unknown"]<-NA
data$Longitude[data$Longitude == -1.0 || data$Longitude == 0.0]<-NA
data$Latitude[data$Latitude == -1.0 || data$Latitude == 0.0]<-NA
View(data)
data$Longitude[data$Longitude == number(-1.0) || data$Longitude == number(0.0)]<-NA
print(typeof(data$Longitude))
data$Longitude[data$Longitude == double(-1) || data$Longitude == double(0)]<-NA
data$Longitude[data$Longitude == as.double(-1) || data$Longitude == as.double(0)]<-NA
View(data)
data$Longitude[data$Longitude == as.double(-1)]<-NA
View(data)
data <- read.csv("myCall feedback_Apr2020.csv", header=TRUE, fileEncoding="UTF-8-BOM")
View(data)
attrs <- ncol(data) #number of columns
records <- nrow(data) #number of rows
sprintf("No. of records: %d",records)
sprintf("No. of attributes: %d",attrs)
class(data)
#first, identifying the missing values
#and modifying these values so that they can be detected as missing values by R
#i.e. change values like Unknown to missing values NA
#getting all possible values for each attribute (except lat and long) and checking if all values are valid
operatorVal = unique(data$Operator)
inOutTravellingVal = unique(data$In.Out.Travelling)
networkTypeVal = unique(data$Network.Type)
ratingVal = unique(data$Rating)
callDropCatVal = unique(data$Call.Drop.Category)
stateVal = unique(data$State.Name)
print(operatorVal)
print(inOutTravellingVal)
print(networkTypeVal)
print(ratingVal)
print(callDropCatVal)
print(stateVal)
#records having invalid latitude and longitude
print(nrow(data[data$Latitude == data$Longitude, 1:8]))
#attributes:
#   #operator :           no missing values
#   #In Out Travelling :  no missing values
#   #Network type :       missing values marked as Unknown
#   #Rating :             no missing values
#   #Call Drop Category : no missing values
#   #Latitude :   missing values marked as -1
#   #Longitude :  missing values marked as -1
#   #State Name : missing values already marked as NA
print(typeof(data$Longitude))
data$Network.Type[data$Network.Type == "Unknown"]<-NA
data$Longitude[data$Longitude == as.double(-1) | data$Longitude == as.double(0)]<-NA
View(data)
print(data[is.na(data$Longitude), 1:8])
data$Network.Type[data$Network.Type == "Unknown"]<-NA
data$Longitude[data$Longitude == as.double(-1) | data$Longitude == as.double(0)]<-NA
data$Latitude[data$Latitude == as.double(-1) | data$Latitude == as.double(0)]<-NA
print(data[is.na(data$Longitude), 1:8])
View(data)
library(mice)
md.pattern(data)
table(data$Network.Type)
sort(table(data$Network.Type), decreasing = TRUE)
sort(table(data$Network.Type), decreasing = TRUE)[1:1]
sort(table(data$Network.Type), decreasing = TRUE)[1:0]
#replacing missing values with most occurring value in that attribute
sort(table(data$Network.Type), decreasing = TRUE)[1:3]
names(sort(table(data$Network.Type), decreasing = TRUE)[1])
#Read data from csv file
data <- read.csv("myCall feedback_Apr2020.csv", header=TRUE, fileEncoding="UTF-8-BOM")
View(data)
attrs <- ncol(data) #number of columns
records <- nrow(data) #number of rows
sprintf("No. of records: %d",records)
sprintf("No. of attributes: %d",attrs)
class(data)
#first, identifying the missing values
#and modifying these values so that they can be detected as missing values by R
#i.e. change values like Unknown to missing values NA
#getting all possible values for each attribute (except lat and long) and checking if all values are valid
operatorVal = unique(data$Operator)
inOutTravellingVal = unique(data$In.Out.Travelling)
networkTypeVal = unique(data$Network.Type)
ratingVal = unique(data$Rating)
callDropCatVal = unique(data$Call.Drop.Category)
stateVal = unique(data$State.Name)
print(operatorVal)
print(inOutTravellingVal)
print(networkTypeVal)
print(ratingVal)
print(callDropCatVal)
print(stateVal)
#records having invalid latitude and longitude
print(nrow(data[data$Latitude == data$Longitude, 1:8]))
#attributes:
#   #operator :           no missing values
#   #In Out Travelling :  no missing values
#   #Network type :       missing values marked as Unknown
#   #Rating :             no missing values
#   #Call Drop Category : no missing values
#   #Latitude :   missing values marked as -1
#   #Longitude :  missing values marked as -1
#   #State Name : missing values already marked as NA
print(typeof(data$Longitude))
#replacing all missing values with NA
#state has already missing values marked as NA
data$Network.Type[data$Network.Type == "Unknown"]<-NA
data$Longitude[data$Longitude == as.double(-1) | data$Longitude == as.double(0)]<-NA
data$Latitude[data$Latitude == as.double(-1) | data$Latitude == as.double(0)]<-NA
#print(data[is.na(data$Longitude), 1:8])
View(data)
#to visualize the missing values and how it is distributed with the data, use mice package
library(mice)
md.pattern(data)
#replacing missing values with most occurring value in that attribute
networkTypeReplace = names(sort(table(data$Network.Type), decreasing = TRUE)[1])
data[is.na(data$Network.Type)] <- networkTypeReplace
data$Network.Type[is.na(data$Network.Type)] <- networkTypeReplace
view(data)
View(data)
#Read data from csv file
data <- read.csv("myCall feedback_Apr2020.csv", header=TRUE, fileEncoding="UTF-8-BOM")
View(data)
attrs <- ncol(data) #number of columns
records <- nrow(data) #number of rows
sprintf("No. of records: %d",records)
sprintf("No. of attributes: %d",attrs)
class(data)
#first, identifying the missing values
#and modifying these values so that they can be detected as missing values by R
#i.e. change values like Unknown to missing values NA
#getting all possible values for each attribute (except lat and long) and checking if all values are valid
operatorVal = unique(data$Operator)
inOutTravellingVal = unique(data$In.Out.Travelling)
networkTypeVal = unique(data$Network.Type)
ratingVal = unique(data$Rating)
callDropCatVal = unique(data$Call.Drop.Category)
stateVal = unique(data$State.Name)
print(operatorVal)
print(inOutTravellingVal)
print(networkTypeVal)
print(ratingVal)
print(callDropCatVal)
print(stateVal)
#records having invalid latitude and longitude
print(nrow(data[data$Latitude == data$Longitude, 1:8]))
#attributes:
#   #operator :           no missing values
#   #In Out Travelling :  no missing values
#   #Network type :       missing values marked as Unknown
#   #Rating :             no missing values
#   #Call Drop Category : no missing values
#   #Latitude :   missing values marked as -1
#   #Longitude :  missing values marked as -1
#   #State Name : missing values already marked as NA
print(typeof(data$Longitude))
#replacing all missing values with NA
#state has already missing values marked as NA
data$Network.Type[data$Network.Type == "Unknown"]<-NA
data$Longitude[data$Longitude == as.double(-1) | data$Longitude == as.double(0)]<-NA
data$Latitude[data$Latitude == as.double(-1) | data$Latitude == as.double(0)]<-NA
#print(data[is.na(data$Longitude), 1:8])
View(data)
#to visualize the missing values and how it is distributed with the data, use mice package
library(mice)
md.pattern(data)
#replacing missing values with most occurring value in that attribute
networkTypeReplace = names(sort(table(data$Network.Type), decreasing = TRUE)[1])
data$Network.Type[is.na(data$Network.Type)] <- networkTypeReplace
stateReplace = names(sort(table(data$State.Name), decreasing = TRUE)[1])
data$State.Name[is.na(data$State.Name)] <- stateReplace
View(data)
data <- read.csv("myCall feedback_Apr2020.csv", header=TRUE, fileEncoding="UTF-8-BOM")
View(data)
#Read data from csv file
data <- read.csv("myCall feedback_Apr2020.csv", header=TRUE, fileEncoding="UTF-8-BOM")
View(data)
attrs <- ncol(data) #number of columns
records <- nrow(data) #number of rows
sprintf("No. of records: %d",records)
sprintf("No. of attributes: %d",attrs)
class(data)
#first, identifying the missing values
#and modifying these values so that they can be detected as missing values by R
#i.e. change values like Unknown to missing values NA
#getting all possible values for each attribute (except lat and long) and checking if all values are valid
operatorVal = unique(data$Operator)
inOutTravellingVal = unique(data$In.Out.Travelling)
networkTypeVal = unique(data$Network.Type)
ratingVal = unique(data$Rating)
callDropCatVal = unique(data$Call.Drop.Category)
stateVal = unique(data$State.Name)
print(operatorVal)
print(inOutTravellingVal)
print(networkTypeVal)
print(ratingVal)
print(callDropCatVal)
print(stateVal)
#records having invalid latitude and longitude
print(nrow(data[data$Latitude == data$Longitude, 1:8]))
#attributes:
#   #operator :           no missing values
#   #In Out Travelling :  no missing values
#   #Network type :       missing values marked as Unknown
#   #Rating :             no missing values
#   #Call Drop Category : no missing values
#   #Latitude :   missing values marked as -1
#   #Longitude :  missing values marked as -1
#   #State Name : missing values already marked as NA
print(typeof(data$Longitude))
#replacing all missing values with NA
#state has already missing values marked as NA
data$Network.Type[data$Network.Type == "Unknown"]<-NA
data$Longitude[data$Longitude == as.double(-1) | data$Longitude == as.double(0)]<-NA
data$Latitude[data$Latitude == as.double(-1) | data$Latitude == as.double(0)]<-NA
#print(data[is.na(data$Longitude), 1:8])
View(data)
#to visualize the missing values and how it is distributed with the data, use mice package
library(mice)
md.pattern(data)
#replacing missing values with most occurring value in that attribute
networkTypeReplace = names(sort(table(data$Network.Type), decreasing = TRUE)[1])
data$Network.Type[is.na(data$Network.Type)] <- networkTypeReplace
stateReplace = names(sort(table(data$State.Name), decreasing = TRUE)[1])
data$State.Name[is.na(data$State.Name)] <- stateReplace
View(data)
#Read data from csv file
data <- read.csv("myCall feedback_Apr2020.csv", header=TRUE, fileEncoding="UTF-8-BOM")
View(data)
attrs <- ncol(data) #number of columns
records <- nrow(data) #number of rows
sprintf("No. of records: %d",records)
sprintf("No. of attributes: %d",attrs)
class(data)
#first, identifying the missing values
#and modifying these values so that they can be detected as missing values by R
#i.e. change values like Unknown to missing values NA
#getting all possible values for each attribute (except lat and long) and checking if all values are valid
operatorVal = unique(data$Operator)
inOutTravellingVal = unique(data$In.Out.Travelling)
networkTypeVal = unique(data$Network.Type)
ratingVal = unique(data$Rating)
callDropCatVal = unique(data$Call.Drop.Category)
stateVal = unique(data$State.Name)
print(operatorVal)
print(inOutTravellingVal)
print(networkTypeVal)
print(ratingVal)
print(callDropCatVal)
print(stateVal)
#records having invalid latitude and longitude
print(nrow(data[data$Latitude == data$Longitude, 1:8]))
#attributes:
#   #operator :           no missing values
#   #In Out Travelling :  no missing values
#   #Network type :       missing values marked as Unknown
#   #Rating :             no missing values
#   #Call Drop Category : no missing values
#   #Latitude :   missing values marked as -1
#   #Longitude :  missing values marked as -1
#   #State Name : missing values already marked as NA
print(typeof(data$Longitude))
#replacing all missing values with NA
#state has already missing values marked as NA
data$Network.Type[data$Network.Type == "Unknown"]<-NA
data$Longitude[data$Longitude == as.double(-1) | data$Longitude == as.double(0)]<-NA
data$Latitude[data$Latitude == as.double(-1) | data$Latitude == as.double(0)]<-NA
#print(data[is.na(data$Longitude), 1:8])
View(data)
#to visualize the missing values and how it is distributed with the data, use mice package
library(mice)
md.pattern(data)
#replacing missing values with most occurring value in that attribute
networkTypeReplace = names(sort(table(data$Network.Type), decreasing = TRUE)[1])
sprintf("Most frequently occurring value for Network Type attribute : %s", networkTypeReplace)
data$Network.Type[is.na(data$Network.Type)] <- networkTypeReplace
stateReplace = names(sort(table(data$State.Name), decreasing = TRUE)[1])
sprintf("Most frequently occurring value for State Name attribute : %s", stateReplace)
data$State.Name[is.na(data$State.Name)] <- stateReplace
View(data)
